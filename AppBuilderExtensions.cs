
namespace Maui.Icons;
public static class AppBuilderExtensions
{
    /// <summary>
	/// Initializes the .NET MAUI Icons Library
	/// </summary>
	/// <param name="builder"><see cref="MauiAppBuilder"/> generated by <see cref="MauiApp"/> </param>
	/// <param name="iconType"><see cref="IconType"/></param>
	/// <returns><see cref="MauiAppBuilder"/> initialized for <see cref="Maui.Icons"/></returns>
    /// 
    public static MauiAppBuilder UseMauiIcons(this MauiAppBuilder builder, IconType iconType = IconType.FluentIcons)
    {
        // Global Var to Find User Selected Icon Type
        SelectedIconType = iconType;
        return builder.ConfigureFonts(fonts =>
        {
            switch (iconType)
            {
                case IconType.FluentIcons:
                    fonts.AddFont(Constants.TtfFluentIcons, Constants.FluentIcons);
                    break;
                case IconType.MaterialIcons:
                    fonts.AddFont(Constants.TtfMaterialIcons, Constants.MaterialIcons);
                    break;
                case IconType.CuppertinoIcons:
                    fonts.AddFont(Constants.TtfCuppertinoIcons, Constants.CuppertinoIcons);
                    break;
                case IconType.Default:
                    fonts.AddFont(Constants.TtfFluentIcons, Constants.FluentIcons);
                    fonts.AddFont(Constants.TtfMaterialIcons, Constants.MaterialIcons);
                    fonts.AddFont(Constants.TtfCuppertinoIcons, Constants.CuppertinoIcons);
                    break;
                default:
                    fonts.AddFont(Constants.TtfFluentIcons, Constants.FluentIcons);
                    break;
            }
            
        });
    }

    public static IconType SelectedIconType { get; set; }
   
}
